# containerを使う方法
# 1. docker-compose.yml等あれば、docker compose upできる
# 2. jobにcontainerを指定し、container内でjobを実行可能（job全体がcontainerに入る）
# 3. service containerを定義し、runner（またはcontainer）から使用可能（DB containerなど、部分的に使用するイメージ）
name: Deployment (Container)
on:
  push:
    branches:
      - main
      - dev
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    environment: testing
    runs-on: ubuntu-latest
    # コンテナ内でjobを実行可能
    # containerを指定していると、service containerもこのcontainer内で実行される
    # container:
    #   image: node:16
    env:
      # docker imageだと値が変わるので注意
      MONGODB_CONNECTION_PROTOCOL: mongodb
      # container内で実行していれば、サービスコンテナのkey名で接続可能
      # MONGODB_CLUSTER_ADDRESS: mongodb
      # container内で無ければ（runner環境なら）サービスコンテナのkeyは使えないので、hostを指定する
      MONGODB_CLUSTER_ADDRESS: 127.0.0.1:27017
      # サービスコンテナに設定した値
      MONGODB_USERNAME: root
      MONGODB_PASSWORD: example
      # コンテナではなく実際のmongo dbに接続する場合
      # MONGODB_CONNECTION_PROTOCOL: mongodb+srv
      # MONGODB_CLUSTER_ADDRESS: cluster0.sncutzn.mongodb.net
      # MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      # MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
      PORT: 8080
    # DBテスト用のサービスコンテナ
    services:
      # 任意の名前
      mongodb:
        image: mongo
        # container内でservice containerを動かさない場合、portの指定が必要
        ports:
          - 27017:27017
        # docker imageの公式を見ると、envが2つ必要なことが分かる
        # https://hub.docker.com/_/mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        continue-on-error: true
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"
